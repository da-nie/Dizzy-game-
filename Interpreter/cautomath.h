#ifndef C_AUTOMATH_H
#define C_AUTOMATH_H

//****************************************************************************************************
//Класс детерминированного конечного автомата
//****************************************************************************************************

//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************

#include <stdint.h>
#include <string>
#include <vector>
#include <list>

//****************************************************************************************************
//макроопределения
//****************************************************************************************************

//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//предварительные объявления
//****************************************************************************************************

//****************************************************************************************************
//Класс детерминированного конечного автомата
//****************************************************************************************************
class CAutomath
{
 public:
  //-перечисления---------------------------------------------------------------------------------------
  //-структуры------------------------------------------------------------------------------------------
  //правило автомата
  struct SRule
  {
   std::string CurrentState;//текущее состояние
   std::string NextState;//следующее состояние
   bool EndingTypeNextState;//является ли следующее состояние допускающим
   
   uint32_t InputFirst;//начальный код перехода
   uint32_t InputLast;//конечный код перехода
  };  
  //-константы------------------------------------------------------------------------------------------
 private:
  //-переменные-----------------------------------------------------------------------------------------
  std::string CurrentState;//текущее состояние автомата
  std::vector<SRule> vector_SRule;//правила перехода автомата
  std::list<uint32_t> InputLine;//входная последовательность, принятая автоматом
  bool EndingTypeCurrentState;//является ли текущее состояние допускающим
 public:
  //-конструктор----------------------------------------------------------------------------------------
  CAutomath(void);
  //-деструктор-----------------------------------------------------------------------------------------
  ~CAutomath();
 public:
  //-открытые функции-----------------------------------------------------------------------------------
  void Release(void);//привести автомат в исходное состояние
  void AddRule(const std::string &current_state,const std::string &next_state,uint32_t input_first,uint32_t input_last,bool next_state_ending);//добавить правило
  void Reset(void);//сбросить автомат в исходное состояние
  bool Push(uint32_t value);//подать на вход автомата число
  bool IsCurrentStateEndingType(void) const;//получить допускающее ли текущее состояние автомата
  bool CompareCurrentState(const std::string &state) const;//сравнить текущее состояние с заданным    
  void GetInputLineToString(std::string &string) const;//получить входную последовательность автомата как строку
 private:
  //-закрытые функции-----------------------------------------------------------------------------------
};

#endif