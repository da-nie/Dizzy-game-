#ifndef I_PART_H
#define I_PART_H

//****************************************************************************************************
//Интерфейс к классу кусочка карты
//****************************************************************************************************

//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include "ctilessequence.h"
#include <stdint.h>
#include <memory>
#include <list>
#include <fstream>
#include <functional>

//****************************************************************************************************
//макроопределения
//****************************************************************************************************


//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//предварительные объявления
//****************************************************************************************************

//****************************************************************************************************
//Интерфейс к классу кусочка карты
//****************************************************************************************************
class IPart:public std::enable_shared_from_this<IPart>
{
 public:
  //-определение типов----------------------------------------------------------------------------------
  //-перечисления---------------------------------------------------------------------------------------    
  //-структуры------------------------------------------------------------------------------------------
  //-константы------------------------------------------------------------------------------------------
  static const uint8_t MASK_PART_IS_UNION=(1<<0);//указание, что данный элемент является объединением
  static const uint8_t MASK_PART_IS_BARRIER=(1<<1);//указание, что данный элемент является препятствием
  static const uint8_t MASK_PART_IS_FIRST_PLANE=(1<<2);//указание, что данный элемент является элементом переднего плана
  static const uint8_t MASK_PART_IS_ITEM=(1<<3);//указание, что данный элемент является предметом
  //-переменные-----------------------------------------------------------------------------------------
  int32_t BlockPosX;//позиция в блоках
  int32_t BlockPosY;
  CTilesSequence cTilesSequence;//последовательность тайлов
  bool Barrier;//является ли барьером
  bool FirstPlane;//является ли передним планом (выводится поверх персонажа)
  bool Item;//является ли предметом
  bool Selected;//выбран
  std::string Name;//название
 private:
  //-переменные-----------------------------------------------------------------------------------------
 public:
  //-конструктор----------------------------------------------------------------------------------------
  IPart(void)
  {
   BlockPosX=0;
   BlockPosY=0;
   Barrier=false;
   FirstPlane=false;
   Item=false;
   Selected=false;
   Name="";
  }
  //-деструктор-----------------------------------------------------------------------------------------
  virtual ~IPart() {}  
 public:
  //-открытые функции-----------------------------------------------------------------------------------
  virtual bool Save(std::ofstream &file)=0;//записать
  virtual bool Load(std::ifstream &file)=0;//сохранить
  virtual bool Export(std::ofstream &file,int32_t scale_x,int32_t scale_y)=0;//экспортировать
  virtual void Release(void)=0;//удалить все элементы
  virtual void AnimationTiles(void)=0;//выполнить анимацию тайлов
  virtual void AnimationTilesByForce(void)=0;//выполнить анимацию тайлов принудительно
  virtual void SetTilesAnimationFrame(size_t frame)=0;//задать кадр анимации
  virtual void Visit(std::function<void(std::shared_ptr<IPart>)> callback_function)=0;//обойти все элементы
  virtual bool IsCoord(int32_t x,int32_t y)//находится ли данный блок в заданных координатах
  {
   if (x==BlockPosX && y==BlockPosY) return(true);
   return(false);
  }
  virtual void RemovePart(std::function<bool(std::shared_ptr<IPart>)> callback_function)=0;//удалить часть
  virtual std::list<std::shared_ptr<IPart>>* GetItemPtr(void)=0;//получить указатель на список элементов  
  //-открытые статические функции-----------------------------------------------------------------------
};

#endif
