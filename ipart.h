#ifndef I_PART_H
#define I_PART_H

//****************************************************************************************************
//Интерфейс к классу кусочка карты
//****************************************************************************************************

//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include "ctilessequence.h"
#include <stdint.h>
#include <memory>
#include <list>
#include <fstream>
#include <functional>

//****************************************************************************************************
//макроопределения
//****************************************************************************************************


//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//предварительные объявления
//****************************************************************************************************

//****************************************************************************************************
//Интерфейс к классу кусочка карты
//****************************************************************************************************
class IPart:public std::enable_shared_from_this<IPart>
{
 public:
  //-определение типов----------------------------------------------------------------------------------
  //-перечисления---------------------------------------------------------------------------------------    
  //-структуры------------------------------------------------------------------------------------------
  //-константы------------------------------------------------------------------------------------------
  //-переменные-----------------------------------------------------------------------------------------
  int32_t BlockPosX;//позиция в блоках
  int32_t BlockPosY;
  CTilesSequence cTilesSequence;//последовательность тайлов
  bool Barrier;//является ли барьером
  bool Selected;//выбран
 private:
  //-переменные-----------------------------------------------------------------------------------------
 public:
  //-конструктор----------------------------------------------------------------------------------------
  IPart(void)
  {
   BlockPosX=0;
   BlockPosY=0;
   Barrier=false;
   Selected=false;
  }
  //-деструктор-----------------------------------------------------------------------------------------
  virtual ~IPart() {}  
 public:
  //-открытые функции-----------------------------------------------------------------------------------
  virtual bool Save(std::ofstream &file)=0;//записать
  virtual bool Load(std::ifstream &file)=0;//сохранить
  virtual bool Export(std::ofstream &file)=0;//экспортировать
  virtual void Release(void)=0;//удалить все элементы
  virtual void AnimateTiles(void)=0;//выполнить анимацию тайлов
  virtual void Visit(std::function<void(std::shared_ptr<IPart>)> callback_function)=0;//обойти все элементы
  virtual bool IsCoord(int32_t x,int32_t y)//находится ли данный блок в заданных координатах
  {
   if (x==BlockPosX && y==BlockPosY) return(true);
   return(false);
  }
  virtual void RemovePart(std::function<bool(std::shared_ptr<IPart>)> callback_function)=0;//удалить часть
  virtual std::list<std::shared_ptr<IPart>>* GetItemPtr(void)=0;//получить указатель на список элементов
  //-открытые статические функции-----------------------------------------------------------------------
};

#endif
