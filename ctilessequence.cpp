//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include "ctilessequence.h"
#include <algorithm>

//****************************************************************************************************
//глобальные переменные
//****************************************************************************************************

//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//макроопределения
//****************************************************************************************************

//****************************************************************************************************
//конструктор и деструктор
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//конструктор
//----------------------------------------------------------------------------------------------------
CTilesSequence::CTilesSequence(const CTile &cTile)
{
 cTile_Sequence.push_back(cTile);
 CurrentIndex=0;
}
//----------------------------------------------------------------------------------------------------
//деструктор
//----------------------------------------------------------------------------------------------------
CTilesSequence::~CTilesSequence()
{
}

//****************************************************************************************************
//закрытые функции
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------

//****************************************************************************************************
//открытые функции
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//записать
//----------------------------------------------------------------------------------------------------
bool CTilesSequence::Save(std::ofstream &file)
{
 bool ret=true;
 auto save_function=[&file,&ret](CTile &cTile)
 {
  if (cTile.Save(file)==false) ret=false;
 };
 int32_t size=cTile_Sequence.size();
 if (file.write(reinterpret_cast<char*>(&size),sizeof(size)).fail()==true) return(false);
 std::for_each(cTile_Sequence.begin(),cTile_Sequence.end(),save_function);
 return(ret);
}
//----------------------------------------------------------------------------------------------------
//сохранить
//----------------------------------------------------------------------------------------------------
bool CTilesSequence::Load(std::ifstream &file)
{
 int32_t size;
 if (file.read(reinterpret_cast<char*>(&size),sizeof(size)).fail()==true) return(false);
 cTile_Sequence.clear();
 CurrentIndex=0;
 for(int32_t n=0;n<size;n++)
 {
  CTile cTile;
  if (cTile.Load(file)==false) return(false);
  cTile_Sequence.push_back(cTile);
 }
 return(true);
}
//----------------------------------------------------------------------------------------------------
//удалить все элементы
//----------------------------------------------------------------------------------------------------
void CTilesSequence::Clear(void)
{
 CTile cTile=cTile_Sequence[0];
 cTile_Sequence.clear();
 cTile_Sequence.push_back(cTile);
 CurrentIndex=0;
}
//----------------------------------------------------------------------------------------------------
//добавить новый тайл
//----------------------------------------------------------------------------------------------------
void CTilesSequence::AddNewTile(const CTile &cTile)
{
 cTile_Sequence.push_back(cTile);
}
//----------------------------------------------------------------------------------------------------
//получить тайл
//----------------------------------------------------------------------------------------------------
CTile& CTilesSequence::GetTile(size_t index)
{
 if (index>=GetSize()) return(cTile_Sequence[0]);
 return(cTile_Sequence[index]);
}
//----------------------------------------------------------------------------------------------------
//получить количество тайлов
//----------------------------------------------------------------------------------------------------
size_t CTilesSequence::GetSize(void)
{
 return(cTile_Sequence.size());
}
//----------------------------------------------------------------------------------------------------
//получить текущий индекс тайла
//----------------------------------------------------------------------------------------------------
size_t CTilesSequence::GetCurrentIndex(void)
{
 CurrentIndex%=GetSize();
 return(CurrentIndex);
}
//----------------------------------------------------------------------------------------------------
//перейти к следующему индексу тайла
//----------------------------------------------------------------------------------------------------
void CTilesSequence::ToNextTile(void)
{
 CurrentIndex++;
 CurrentIndex%=GetSize();
}
//----------------------------------------------------------------------------------------------------
//сбросить текущий индекс тайла
//----------------------------------------------------------------------------------------------------
void CTilesSequence::ResetCurrentIndex(void)
{
 CurrentIndex=0;
}
//----------------------------------------------------------------------------------------------------
//получить указатель на список тайлов
//----------------------------------------------------------------------------------------------------
std::vector<CTile>* CTilesSequence::GetItemPtr(void)
{
 return(&cTile_Sequence);
}
