#ifndef C_CONDITIONAL_OF_TIMER_H
#define C_CONDITIONAL_OF_TIMER_H

//****************************************************************************************************
// ласс условного выражени€ "событие таймера"
//****************************************************************************************************

//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include "iconditionalexpression.h"
#include <string>
#include <stdint.h>
#include "../Actions/iaction.h"

//****************************************************************************************************
//макроопределени€
//****************************************************************************************************

//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//предварительные объ€влени€
//****************************************************************************************************

//****************************************************************************************************
// ласс условного выражени€ "событие таймера"
//****************************************************************************************************
class CConditionalOfTimer:public IConditionalExpression
{
 public:
  //-перечислени€---------------------------------------------------------------------------------------
  //-структуры------------------------------------------------------------------------------------------
  //-константы------------------------------------------------------------------------------------------
 private:
  //-переменные-----------------------------------------------------------------------------------------
  std::string Name;//им€ объекта, который нужно обрабатывать
  int32_t Counter;//счЄтчик
  int32_t Divider;//делитель таймера
  std::shared_ptr<IAction> iAction_Ptr;//указатель на выполн€емое действие
 public:
  //-конструктор----------------------------------------------------------------------------------------
  CConditionalOfTimer(int32_t divider,const std::string &name,std::shared_ptr<IAction> iAction_SetPtr);
  //-деструктор-----------------------------------------------------------------------------------------
  ~CConditionalOfTimer();
 public:
  //-открытые функции-----------------------------------------------------------------------------------
  void Execute(int32_t dizzy_x,int32_t dizzy_y,int32_t dizzy_width,int32_t dizzy_height,int32_t part_width,int32_t part_height,bool use,bool timer,CGameState &cGameState);//проверить условие и выполнить действие
 private:
  //-закрытые функции-----------------------------------------------------------------------------------  
  void Init(void);//инициализаци€
};

#endif