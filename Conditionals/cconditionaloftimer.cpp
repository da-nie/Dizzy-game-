//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include "cconditionaloftimer.h"
#include <algorithm>

//****************************************************************************************************
//глобальные переменные
//****************************************************************************************************

//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//макроопределения
//****************************************************************************************************

//****************************************************************************************************
//конструктор и деструктор
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//конструктор
//----------------------------------------------------------------------------------------------------
CConditionalOfTimer::CConditionalOfTimer(int32_t divider,const std::string &name,std::shared_ptr<IAction> iAction_SetPtr)
{
 Divider=divider;
 Counter=0;
 Name=name;
 iAction_Ptr=iAction_SetPtr;
 Init();
}
//----------------------------------------------------------------------------------------------------
//деструктор
//----------------------------------------------------------------------------------------------------
CConditionalOfTimer::~CConditionalOfTimer()
{
}

//****************************************************************************************************
//закрытые функции
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//инициализация
//----------------------------------------------------------------------------------------------------
void CConditionalOfTimer::Init(void)
{ 
 if (iAction_Ptr.get()!=NULL) iAction_Ptr->Init();
}

//****************************************************************************************************
//открытые функции
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//проверить условие и выполнить действие
//----------------------------------------------------------------------------------------------------
void CConditionalOfTimer::Execute(int32_t dizzy_x,int32_t dizzy_y,int32_t dizzy_width,int32_t dizzy_height,int32_t part_width,int32_t part_height,bool use,bool timer,CGameState &cGameState)
{
 Init();
 if (timer==false) return;
 Counter++;
 Counter%=Divider;
 if (Counter!=0) return;

 std::shared_ptr<IAction> iAction_LocalPtr=iAction_Ptr;
 auto execute_function=[this,&cGameState,&iAction_LocalPtr,part_width,part_height,dizzy_x,dizzy_y,dizzy_width,dizzy_height](std::shared_ptr<IPart> iPart_Ptr)
 {  
  if (iPart_Ptr->Name.compare(Name)!=0) return;//имена не совпадают
  if (iPart_Ptr->InInventory==true) return;//предмет в инвентаре
  if (iPart_Ptr->Enabled==false) return;//предмет неактивен  
  if (iAction_LocalPtr.get()!=NULL) iAction_LocalPtr->Execute(iPart_Ptr,cGameState);
 };
 std::for_each(cGameState.MapNamed.begin(),cGameState.MapNamed.end(),execute_function);
}
