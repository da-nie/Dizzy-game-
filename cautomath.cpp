//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include "cautomath.h"
#include <stdio.h>
#include <algorithm>
#include <functional>

//****************************************************************************************************
//глобальные переменные
//****************************************************************************************************

//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//макроопределения
//****************************************************************************************************

//****************************************************************************************************
//конструктор и деструктор
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//конструктор
//----------------------------------------------------------------------------------------------------
CAutomath::CAutomath(void)
{
 Release();	
}
//----------------------------------------------------------------------------------------------------
//деструктор
//----------------------------------------------------------------------------------------------------
CAutomath::~CAutomath()
{
 Release();	
}

//****************************************************************************************************
//закрытые функции
//****************************************************************************************************

//****************************************************************************************************
//открытые функции
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//привести автомат в исходное состояние
//----------------------------------------------------------------------------------------------------
void CAutomath::Release(void)
{
 EndingTypeCurrentState=false;
 CurrentState="begin";
 vector_SRule.clear();
 InputLine.clear();
}
//----------------------------------------------------------------------------------------------------
//добавить правило
//----------------------------------------------------------------------------------------------------
void CAutomath::AddRule(const std::string &current_state,const std::string &next_state,uint32_t input_first,uint32_t input_last,bool next_state_ending)
{
 SRule sRule;
 sRule.CurrentState=current_state;
 sRule.NextState=next_state;
 sRule.EndingTypeNextState=next_state_ending;
 sRule.InputFirst=input_first;
 sRule.InputLast=input_last;
 vector_SRule.push_back(sRule);
}
//----------------------------------------------------------------------------------------------------
//сбросить автомат в исходное состояние
//----------------------------------------------------------------------------------------------------
void CAutomath::Reset(void)
{
 EndingTypeCurrentState=false;
 CurrentState="begin";
 InputLine.clear();	
}
//----------------------------------------------------------------------------------------------------
//подать на вход автомата число
//----------------------------------------------------------------------------------------------------
bool CAutomath::Push(uint32_t value)
{
 size_t size=vector_SRule.size();
 for(size_t n=0;n<size;n++)
 {
  const SRule &sRule=vector_SRule[n]; 	
  if (value<sRule.InputFirst || value>sRule.InputLast) continue;
  if (sRule.CurrentState.compare(CurrentState)==0)
  {
   CurrentState=sRule.NextState;
   EndingTypeCurrentState=sRule.EndingTypeNextState;
   InputLine.push_back(value);
   return(true);
  }
 }
 Reset();
 return(false); 
}
//----------------------------------------------------------------------------------------------------
//получить допускающее ли текущее состояние автомата
//----------------------------------------------------------------------------------------------------
bool CAutomath::IsCurrentStateEndingType(void) const
{
 return(EndingTypeCurrentState);
}
//----------------------------------------------------------------------------------------------------
//сравнить текущее состояние с заданным
//----------------------------------------------------------------------------------------------------
bool CAutomath::CompareCurrentState(const std::string &state) const
{
 if (CurrentState.compare(state)==0) return(true);
 return(false);
}
//----------------------------------------------------------------------------------------------------
//получить входную последовательность автомата как строку
//----------------------------------------------------------------------------------------------------
void CAutomath::GetInputLineToString(std::string &string) const
{
 string.clear();
 std::list<uint32_t>::const_iterator i=InputLine.begin();
 while(i!=InputLine.end())
 {
  uint32_t v=*i;
  i++;
  string+=static_cast<char>(v&0xff);   	
 }
 //std::for_each(InputLine.begin(),InputLine.end(),std::bind1st(std::mem_fun(&CAutomath::AddSymbol),string));
}