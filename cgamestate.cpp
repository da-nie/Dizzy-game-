//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include "cgamestate.h"

//****************************************************************************************************
//глобальные переменные
//****************************************************************************************************

//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//макроопределения
//****************************************************************************************************

//****************************************************************************************************
//конструктор и деструктор
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//конструктор
//----------------------------------------------------------------------------------------------------
CGameState::CGameState(void)
{ 
}
//----------------------------------------------------------------------------------------------------
//деструктор
//----------------------------------------------------------------------------------------------------
CGameState::~CGameState()
{
}

//****************************************************************************************************
//закрытые функции
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//
//----------------------------------------------------------------------------------------------------

//****************************************************************************************************
//открытые функции
//****************************************************************************************************

//----------------------------------------------------------------------------------------------------
//очистить список возможных для взятия объектов
//----------------------------------------------------------------------------------------------------
void CGameState::ClearTake(void)
{
 Take.clear();
}
//----------------------------------------------------------------------------------------------------
//добавить объект в список возможных для взятия
//----------------------------------------------------------------------------------------------------
void CGameState::AddTake(std::shared_ptr<IPart> iPart_Ptr)
{
 Take.push_back(iPart_Ptr);
}
//----------------------------------------------------------------------------------------------------
//добавить сообщение
//----------------------------------------------------------------------------------------------------
void CGameState::AddMessage(const std::string &message,int32_t screen_x,int32_t screen_y)
{
 //определяем размер сообщения в символах
 SMessage sMessage;
 size_t length=message.length();
 std::string line;
 line.reserve(length);
 sMessage.InSymbolWidth=0;
 const char *ptr=message.c_str();
 for(size_t n=0;n<length;n++,ptr++)
 {
  uint8_t symbol=static_cast<uint8_t>(*ptr);  
  if (symbol!=static_cast<uint8_t>('\n')) line+=(*ptr);
  if (symbol==static_cast<uint8_t>('\n') || n==length-1)
  {
   size_t line_width=line.length();
   if (line_width>sMessage.InSymbolWidth) sMessage.InSymbolWidth=line_width;
   sMessage.Message.push_back(line); 
   line="";
  }  
 }
 sMessage.ScreenX=screen_x;
 sMessage.ScreenY=screen_y;
 sMessage.InSymbolHeight=sMessage.Message.size();
 Message.push_back(sMessage);
}