#ifndef C_GAME_STATE_H
#define C_GAME_STATE_H

//****************************************************************************************************
//Класс состояния игры
//****************************************************************************************************

//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include <memory>
#include <stdint.h>
#include <vector>
#include <string>
#include "ipart.h"

//****************************************************************************************************
//макроопределения
//****************************************************************************************************

//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//предварительные объявления
//****************************************************************************************************

//****************************************************************************************************
//Класс состояния игры
//****************************************************************************************************
class CGameState
{
 public:
  //-перечисления---------------------------------------------------------------------------------------
  //-структуры------------------------------------------------------------------------------------------
  //выводимое сообщение
  struct SMessage
  {
   int32_t ScreenX;//координаты левого верхнего угла на экране
   int32_t ScreenY;
   int32_t InSymbolWidth;//ширина в символах
   int32_t InSymbolHeight;//высота в символах
   std::vector<std::string> Message;//выводимые сообщения
  };
  //-константы------------------------------------------------------------------------------------------
  //-переменные-----------------------------------------------------------------------------------------  
  std::vector<std::shared_ptr<IPart> > Take;//предметы, которые можно взять
  std::vector<std::shared_ptr<IPart> > Inventory;//интвентарь
  std::shared_ptr<IPart> UsedObject;//используемый предмет
  std::vector<std::shared_ptr<IPart> > Map;//карта

  std::vector<SMessage> Message;//список сообщений
 private:
  //-переменные-----------------------------------------------------------------------------------------  
 public:
  //-конструктор----------------------------------------------------------------------------------------
  CGameState(void);
  //-деструктор-----------------------------------------------------------------------------------------
  ~CGameState();
 public:
  //-открытые функции-----------------------------------------------------------------------------------
  void ClearTake(void);//очистить список возможных для взятия объектов
  void AddTake(std::shared_ptr<IPart> iPart_Ptr);//добавить объект в список возможных для взятия
  void AddMessage(const std::string &message,int32_t screen_x,int32_t screen_y);//добавить сообщение
 private:
  //-закрытые функции-----------------------------------------------------------------------------------  
};

#endif